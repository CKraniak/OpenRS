Core modules:
- Dispatcher (event system core)
  - GameEvent
    - BooleanCombinationTree
    - BooleanCombinationTreeGenerator
  - GameEventHandler
- GlFunctionFinder (like a custom GLEW)
- GlCore
- CesCore
  - Entity
  - EntityList
  - Component
  - System
  - SystemGroup

An entity has components, which may or may not have systems that depend on them.

So there will be a top-level entity or entity-list? No. -- yes, sort of

LocalSystem vs. GlobalSystem types? No. -- still no, but a SystemGroup is defined

Data is owned by Components, which are used by systems, which essentially
iterate over lists of entitys with agreeable component types.

The main loop will invoke systems, which look up the needed entitys and call
other systems as needed. A system may be active or inactive, depending on
whether the main loop should default to calling it, and activity may depend on
the game's "state". So in state "getinfo", the InfoDisplay system is active.

Game loop pseudocode:
- Call state-active systems in the order defined by the state
  - Main thing changed by the state is the input-handling and the rendering
- State switches are usually decided by certain inputs, but may be automatic

States:
- init
  - ?
- menu
  - main_menu
    - ACT: getinput
      - active inputs are arrow keys, enter, escape, backspace
    - ACT: render
  - pause_menu
    - ACT: getinput
      - active input is esc
    - ACT: render
  - help_menu
    - ACT: getinput
      - active input not determined yet
    - ACT: render
  - options_menu_frommain
    - ACT: getinput
      - active input not determined yet
    - ACT: render
  - options_menu_fromgame
    - ACT: getinput
      - active input not determined yet
    - ACT: render
- game
  - init
  - exit
  - base
    - ACT: getinput
      - active inputs are numpad keys, F1, esc, mouse, and state_change keys
  - get_info
  - interact
  - build
  - worldmap
  - districtmap

******************************************

Entity types needed:
- Player
- Monster
- MedKit
- Door
- Shelf
- Weapon

Components needed for each:
- Player:
  - Health
  - MaxHealth
  - AttackPower
  - Position
  - EquippedItem
  - Inventory
  - Sprite
  - Alliance
  - InfoText
  - RenderType
- Monster:
  - Health
  - MaxHealth
  - AttackPower
  - Position
  - AI
  - EquippedItem
  - Sprite
  - Alliance
  - InfoText
  - RenderType
- MedKit
  - Value
  - Position
  - Sprite
  - InfoText
  - RenderType
- Door
  - State
  - Position
  - Sprite
  - RenderType
- Weapon
  - Type (ranged vs. melee)
  - Power
  - Position
  - Sprite
  - InfoText
  - RenderType

RenderType:
  - menu
  - gamegrid
  - none (not needed, nonexistence of RenderType component implies "none")
  - gameconsole
  - inventorygrid
  - gamemap

Systems:
  - Combat
  - Render
  - Collision
    - Calls combat system on collision of entitys with enemy alliances
    - Calls interaction system on collision of entitys with allied alliance
  - Movement
    -
  - Input
    - Calls movement system on movement input (numpad keys, mostly)
    -
  - InfoDisplay
  - State (?)
    - Kind of modifies the behavior of most other systems:
      - Input will move menus around, but does a bit more in an in-game state
      - There is no menu combat
      - There is no menu collision
      - If in a "getinfo" state, most inputs get supressed, except mouse

************************************************************

Menu Entity Types:
- BasicSelection
- Radio
- Checkbox
- Slider
- NumericInput


- BasicSelection
  - in_menu
  - text
  - text_color
- Radio
  - in_menu
- RadioItem
  - in_radio
  - text
etc.

Menu audio:
  - audio = soundofsilence

Entity: mainmenu:
  - menu_order_resolution_rule:
    - Continue Game
    - New Game
    - Load Game
    - unlisted_new_by_placenum_then_alphabetical
    - Options
    - About
    - Exit
  - background_color = 0x000000ff (rgba)
  - selected = 0
  - menu_name = "main"
  - check_continuegame_on_activate = true

Buttons:
- type: BasicSelection
  - text = "New Game"
  - text_color = 0xeeeeeeff (rgba)
  - in_menu = "main"
  - on_selected = "new_game"
- type: BasicSelection
  - text = "Load Game"
  - text_color = 0xeeeeeeff (rgba)
  - in_menu = "main"
  - on_selected = "load_game"
etc.

ButtonOrder:
  - list of Button entitys

***************************************************************

Minimalist start:
- Set init_mainmenu as the new state
- Jump into the update loop
- Update loop sees new state, calls state-init with previous state info intact
  - init_mainmenu loads / activates mainmenu entity
  - init_mainmenu loads all entitys with in_menu = "main"
  - init_mainmenu sets new state to menu
- State switch event is generated, currently nobody cares except state tracker
- update called, sees state "menu":
  - grabs main menu background color and text
  - updates menu render structure
- Renderer renders
- Loop renderer (with no state updates) while waiting for input
  - Takes care of window movement and resizes, minimization, etc.
- Input of either enter or arrow key
  - If enter, get selected's on_selected and looks up associated switching rule
  - If arrow, find new selected
  - need_update is set if need be

*****************************************************************

Need:
- Generic menu updating function
- Generic menu input handling function

****************************************************************

on_selected("new_game"):
- deactivate_current_menu
- activate_menu = "newgame"

on_selected("game_init"):
- deactivate_current_menu (if prev. state was a menu)
- activate_game = game_properties

Game:
- turn
- district_list
- width
- height

District:
- terrain_list
- entity_list
- environment
- width
- height

*******************************************************************

Begin game:
- Create game entity, populate
  - Creates districts, populates each, given environment, width, and height
    - Populate terrain_list using whichever generator
    - Populate entity_list using whatever generator
- Input then goes to:
  - movement system (numpad keys)
  - state changing (currently none)
- Movement system, given input, default method will be:
  - get the current movement_target (retrieved from district)
    - has components "location", "move_type=numpad"
  - apply input to movement_target if no collision, otherwise resolve collision
  - if all movement_targets processed, send "increment_turn" event
- AI system
  - have list of objects with "AI" component
  - for alpha 1, only a simple_enemy_1 AI will be defined
  - call the defined AI script / function
    - simple_enemy_1 will find the shortest path to an object of
        player_alleigance, and return request to move toward / attack player
- Combat system
  - Given an attacker entity (has "AttackPower", optionally an attack modifier)
  - Given a defender entity (has "Health", "Armor", any modifiers of the two)
  - Determines damage to apply to defender using whatever formula / RNG
  - Applies damage
  - Sends message to defender, if applicable
    - either run on_attacked or on_killed or somesuch
    - default on_attacked is nothing
    - default on_killed removes entity from district's entity_list

**************************************************************************

New sequence:
 - Start
 - Create: entity list, component list, and system group
   - The state machine is in system group
 - Get the starting state from somewhere
 - Send the state change event
 - Enter loop, loop while quit has not been set:
   - Empty message pump
   - Update call against any systems marked behind (they would mark themselves
     in response to certain events being generated from input handling)
   - Render if the screen has been marked invalid

Everything now comes down to how the systems interact with one another and the
events. First point is that systems communicate rather exclusively through
events. Second point is that event functionality depends on the handlers and
the states they are listening for.

THE STATE IS WHAT DETERMINES EVERYTHING!

So we start off in a state "init". The systems who need to do things in this
state would have event handlers registered with "on_state_change=init" handlers.

What comes after "init", and when is it triggered?

Let's see, in "init" we will be initializing OpenGL and loading everything out
of files. When subsystems are done, they can send "im_ready" events, and there
can be a special system that switches to the main menu state (configurable)
once all of the "ready" events it needs are fired.

It then switches to the main menu state (or whichever state is configured).
The event "on_state_change=mainmenu" fires, and the entity loader that has the
responsibility for populating the main menu makes the main menu entity following
its recipe. The system calls update next, which would iterate over the systems
that registered themselves for mainmenu state updates. (This would likely just
be the system sending out an event {"state_mainmenu", "on_update"}.) Similarly
for rendering.

It then actually gets to the main loop, which applies inputs, updates, and
renders, as is tradition. Just remember that the handlers used are selected by
the state.

So how does a rendered state transition work? Say, from the game screen to the
options menu?

Starting from the game state in the main loop, you'll see an input that calls
the "options" state, maybe "esc", "o", or possibly "F2". It would call the
state change function in the dispatcher, with state "menu_options". The
dispatcher emits an event with type {"on_state_change=menu_options"}. The things
that would need to care respond: the menu system makes its entities, primarily.
Then when update is called with the new state, it would perform ... nothing?
Well, since the menu has theoretically just now been initialized, it should
already be in an updated state. Render will definitely run, but the form of
what's rendered may vary.

**********************************************************************

I think it's clear I will need a few standard renderers that get called from a
variety of states, and with a variety of entities controlling their appearances.

The first renderer is the menu renderer. It'll get fullscreen menus.

The second renderer is the game renderer. It renders, duh, the game.

The third one is the fancy one. It'll be a game overlay renderer. The game will
be behind the menu, with the menu centered in the screen. This may end up being
an extension of the box overlay that puts small informational boxes in either
top corner, with the added caveat that the game is paused while the menu is
active, and the input goes into a menu state. So this is basically a subset of
the second renderer, except with wider consequences.

*********************************************************************

Every state should be capable of being the post-init state while a.) not
crashing the game and b.) ability to return to a reasonable state and c.) any
needed entities that don't exist are conjured up, or their absense triggers a
sane behavior.

For example, if I start in game mode, it could either create a default game from
scratch, load the most recent game (auto "continue game"), or it could load an
empty game. The empty game (if chosen) should not crash.

********************************************************************

How will rendering work?

The *cores are defining data structures that can / will be renderable. They
might also be the ones to do the actual drawing ... maybe?

No, the rendering should be done in *driver code. Have an OutputInterface that
can have either GL or ASCII behind it; systems call that and set up data in
structures owned by the interface. The systems *do not* own the structures that
get rendered, they just push their own data upstream. These are all held in the
appropriate core until time to render.

Now we can saw that:
 - update() tells all systems to push data up to the *core. The core will work out
   what gets displayed and how to do it.

 - render() should go to the *core, which in turn calls the driver with its data
   to write to screen.

So, how will the renderer tie into the main loop?

********************************************************************

Let's see. For the CES master list / database ...

The database cesystem isn't bad. What ops should it need to support?

So upon start, we will specify the load directory in main; this could be config
controlled. The directory goes to the LoadEntity system. When the systems get
inited, LoadEntity will load the whole directory, then emit an event to the
effect of "entities_loaded" with list pointers in the data fields. The database
will see this event and suck in all the entities from that. --> NOW CHANGED

The state will switch to whatever is configured next. So if the state goes to
"main_menu", the next few things that happen will be:
- The AsciiDisplay will need the main menu entity; it gets it from the initial
  "entities_loaded" event or it makes it itself. If it makes it, it has to
  run an "entity_created" event. If it adds or subtracts components, the
  appropriate events are emitted, etc.
- In this state, the Input system emits arrow_key_up and arrow_key_down events,
  and also an enter_event; the AsciiDisplay will update the current menu
  selection (which is a component of main_menu) based on the arrow keys and
  throw events on the updates.
- The on_enter of each button will say something like ""

********************************************************************

KNOWN SYSTEMS:
 - Ascii Display
 - OpenGL 2D Display
   - So basically I should make a window system and have it use display drivers
   - Then I can have menu layouts and the game layout
 - Audio
 - Player Movement
 - Collision
 - Input
 - "Database" (for entity / component storage)
 - LoadEntity
 - SaveGame
 - LoadGame
 - MeleeCombat
 - RangedCombat
 - View
 - Minimap
 - AI
 - Hunger
 - Health
 - Inventory (player, chests, shelves, NPCs, etc.)
   - stowable=true (adds pick up / drop commands)
   - max_stack=INT (most stacks an item can have in an arbitrary inventory)
 - Menu
 - Interact

********************************************************************

DISPLAY SYSTEM

2 main sets: CORE and RENDERER

CORE is data containers (primitives and whatnot) and management of such
RENDERER pushes the CORE data to the OS

This is done so that later in development I can implement a triple-buffer
(3 cores) and have update() affect one core while render() affects another.
So the core has things that get pushed up by CESystems, the renderer has OS
interfaces.

The MOVE event will:
- Call player movement system (PMCES), which:
--- Calls the grid system to see what's there / if there's a collision
- The PMCES will (on no collision) call the grid again with a move COMMAND
- The grid will tell the Ascii display system (ADCES) to update as appropriate
- ADCES will push data to its CORE
- Event returns

When the main loop calls render(), the Ascii renderer will see the CORE has
been made dirty and re-render it. CORE freshness data location has yet to be
determined; it should be threadsafe though.

On startup, we will need to make the core(s) and the renderer. render() will
be part of MLInterface, but update() is a CES thing. main() will need to sort
out which *core the renderer is rendering and which *core the CES is updating.

Initially, there will only be one core, which will be connected to the ADCES
and subsequently sent to the renderer for rendering. Essentially, neither the
ADCES nor the renderer should care about threads at all, and if threads ever
come up it will be main()'s job. That being said, both the ADCES and the
renderer should not be wed to a particular *core, so main() can hotplug them
at will.

********************************************************************

I've done it!

EntityListReaders are managed by a manager  / single EntityList created by Main
and passed into each via the SystemGroup (once again).

Let's call the manager an ECList (Entity-Component List). It's purpose is to
list relations between entities and components.
